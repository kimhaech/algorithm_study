### 게임 맵 최단거리 - level-2

- code
``` python
from collections import deque 

def solution(maps):
    answer = 0
    cur_q = deque() # 인근 노드의 기록
    len_col = len(maps[0]) # 열의 수(가로 길이)
    len_row = len(maps) # 행의 수(세로 길이)
    visit = [[0 for j in range(len_col)] for i in range(len_row)] # 방문 기록 및 현재 위치까지의 지난 수
    mx = [-1, 0, 1, 0] # 상,좌,하,우
    my = [0, -1, 0, 1] # 상,좌,하,우
    
    cur_q.append([0,0]) # 시작점
    visit[0][0] = 1
    while cur_q:
        cx, cy = cur_q.popleft() # 맨 앞 요소 빼기
        for i in range(4): # 이동된 좌표
            nx = cx + mx[i]
            ny = cy + my[i]
            
            if 0<=nx<len_row and 0<=ny<len_col and maps[nx][ny] == 1 and visit[nx][ny] == 0:
                cur_q.append([nx,ny]) # 방문 예정 노드 추가
                visit[nx][ny] = visit[cx][cy] + 1 # 해당 위치의 소요 블럭 수 추가 및 방문처리
                
    if visit[len_row-1][len_col-1] == 0: # 목적지 좌표의 방문 처리가 되지 않은 경우
        return -1
    else:
        answer = visit[len_row-1][len_col-1]
        
    return answer
```

- 풀이

1. BFS활용
2. queue에 방문 예정의 좌표를 기록
3. 앞의 좌표를 pop 하여 해당 좌표에서 상하좌우의 좌표를 방문하게 한다. 방문 기록은 이전의 노드까지 지나온 수 + 1
4. 해당 과정 반복 후 더 이상 방문할 수 있는 좌표가 없는 경우(queue가 비었다) 종료
5. 목적지 노드에 방문 기록이 없다면 -1, 있다면 해당 값을 반환ㄹ
